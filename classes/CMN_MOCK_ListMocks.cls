/**
 * @description Copyright (c), FinancialForce.com, inc
 * All rights reserved.
 * <p/>
 * Redistribution and use in source and binary forms, with or without modification,
 *   are permitted provided that the following conditions are met:
 * <p/>
 * - Redistributions of source code must retain the above copyright notice,
 *      this list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above copyright notice,
 *      this list of conditions and the following disclaimer in the documentation
 *      and/or other materials provided with the distribution.
 * - Neither the name of the FinancialForce.com, inc nor the names of its contributors
 *      may be used to endorse or promote products derived from this software without
 *      specific prior written permission.
 * <p/>
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 * THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * <p/>
 * Generated by apex-mocks-generator version 4.0.1
 **/
public inherited sharing class CMN_MOCK_ListMocks
{
	/**
	 * @description mock list implementation
	 */
	//noinspection ApexUnusedDeclaration
	public class Mock_List implements CMN_MOCK_List.IList
	{
		private CMN_MOCK_ApexMocks mocks;

		public Mock_List(CMN_MOCK_ApexMocks mocks)
		{
			this.mocks = mocks;
		}

		public void add(String value)
		{
			mocks.mockVoidMethod(this, 'add', new List<Type> {System.Type.forName('String')}, new List<Object> {value});
		}

		public void add(String value1, String value2, String value3, String value4)
		{
			mocks.mockVoidMethod(this, 'add', new List<Type> {System.Type.forName('String'), System.Type.forName('String'), System.Type.forName('String'), System.Type.forName('String')}, new List<Object> {value1, value2, value3, value4});
		}

		public void addMore(String value)
		{
			mocks.mockVoidMethod(this, 'addMore', new List<Type> {System.Type.forName('String')}, new List<Object> {value});
		}

		public void add(List<String> value)
		{
			mocks.mockVoidMethod(this, 'add', new List<Type> {System.Type.forName('List<String>')}, new List<Object> {value});
		}

		public String get(Integer index)
		{
			return (String)mocks.mockNonVoidMethod(this, 'get', new List<Type> {System.Type.forName('Integer')}, new List<Object> {index});
		}

		public String get2(Integer index, String value)
		{
			return (String)mocks.mockNonVoidMethod(this, 'get2', new List<Type> {System.Type.forName('Integer'), System.Type.forName('String')}, new List<Object> {index, value});
		}

		public void clear()
		{
			mocks.mockVoidMethod(this, 'clear', new List<Type> {}, new List<Object> {});
		}

		public Boolean isEmpty()
		{
			return (Boolean)mocks.mockNonVoidMethod(this, 'isEmpty', new List<Type> {}, new List<Object> {});
		}

		public void set(Integer index, Object value)
		{
			mocks.mockVoidMethod(this, 'set', new List<Type> {System.Type.forName('Integer'), System.Type.forName('Object')}, new List<Object> {index, value});
		}
	}
}